{
    "openapi": "3.0.1",
    "info": {
      "title": "MOVIE RENTAL API",
      "description": "API used to rent movies",
      "version": "1.0.0"
    },
    "servers": [
      {
        "description": "BASE URL",
        "url": "http://localhost:8000"
      }
    ],
    "tags": [
      {
        "name": "Sessions",
        "description": "Everything about sessions"
      },
      {
        "name": "Users",
        "description": "Everything about users"
      },
      {
        "name": "Movies",
        "description": "Everything about user preferences"
      },
      {
        "name": "Rentals",
        "description": "Everything about user preferences"
      }
    ],
    "paths": {
      "/v1/users/login": {
        "post": {
          "tags": [
            "Sessions"
          ],
          "summary": "This route is used to authenticate users",
          "description": "This endpoint will **authenticate an user in the system.**",
          "requestBody": {
            "description": "Log in",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "User authenticated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SessionResponse"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Input Validation errors",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InputValidationError"
                  }
                }
              }
            },
            "401": {
              "description": "UnauthorizedError",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UnauthorizedError"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/users": {
        "post": {
          "tags": [
            "Users"
          ],
          "summary": "This route will create an user",
          "description": "This endpoint will **create an user in the system.**",
          "requestBody": {
            "description": "User",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "User created successfully",
              "content": {
                "application/json": {
                  "schema": {
                      "$ref": "#/components/schemas/UserResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Input Validation errors",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InputValidationError"
                  }
                }
              }
            },
            "401": {
              "description": "UnauthorizedError",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UnauthorizedError"
                  }
                }
              }
            },
            "default": {
              "description": "Custom Validation errors",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CustomError"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "user"
        },
        "get": {
          "tags": [
            "Users"
          ],
          "summary": "This route will return all users",
          "description": "This endpoint gets **all registered** users",
          "security": [
            {
              "JWT": []
            },
            {
              "OAuth2": []
            }
          ],
          "responses": {
            "200": {
              "description": "An array of users data",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserIndex"
                  }
                }
              }
            },
            "404": {
              "description": "User not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NotFoundError"
                  }
                }
              }
            },
            "default": {
              "description": "Unexpected error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/users/{userId}": {
        "get": {
          "tags": [
            "Users"
          ],
          "summary": "This route will return a specific user",
          "description": "This endpoint gets **an user by id** and return it",
          "security": [
            {
              "JWT": []
            },
            {
              "OAuth2": []
            }
          ],
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "description": "User ID used to get specific user data",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "An object with user data",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              }
            },
            "404": {
              "description": "User not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NotFoundError"
                  }
                }
              }
            },
            "default": {
              "description": "Unexpected error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "Users"
          ],
          "summary": "This route will update an user",
          "description": "This endpoint will **update an user in the system by id.**",
          "security": [
            {
              "JWT": []
            },
            {
              "OAuth2": []
            }
          ],
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "description": "User ID used to update specific user data",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "User",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRequest"
                }
              }
            },
            "required": true
          },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InputValidationError"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "user"
    },
        "delete": {
          "tags": [
            "Users"
          ],
          "summary": "This route will delete a user",
          "description": "This endpoint will **delete an user in the system by id.**",
          "security": [
            {
              "JWT": []
            },
            {
              "OAuth2": []
            }
          ],
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "description": "User ID used to delete specific user data",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No content",
              "content": {}
            },
            "404": {
              "description": "User not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NotFoundError"
                  }
                }
              }
            },
            "default": {
              "description": "Unexpected error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            }
          }
        }
      }
    },
    "components": {
      "securitySchemes": {
        "JWT": {
          "type": "http",
          "scheme": "bearer",
          "bearerFormat": "JWT",
          "description": "Bearer token used to authenticate in API | **(header:Authorization)**"
        },
        "API_Secret": {
          "type": "apiKey",
          "in": "header",
          "name": "x-api-secret",
          "description": "API secret used to authenticate in **AUTH API**"
        },
        "API_Key": {
          "type": "apiKey",
          "in": "header",
          "name": "x-api-key",
          "description": "API key used to authenticate in **AUTH API**"
        },
        "OAuth2": {
          "type": "oauth2",
          "flows": {
            "authorizationCode": {
              "authorizationUrl": "https://example.com/oauth/authorize",
              "tokenUrl": "https://example.com/oauth/token",
              "scopes": {
                "read": "Grants read access",
                "write": "Grants write access",
                "admin": "Grants access to admin operations"
              }
            }
          }
        }
      },
      "schemas": {
        "UserRegisterRequest": {
          "required": [
            "email",
            "name",
            "last_name",
            "password",
            "passwordConfirmation"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "First user name",
              "example": "John"
            },
            "last_name": {
              "type": "string",
              "description": "Last user name",
              "example": "Doe"
            },
            "email": {
              "type": "string",
              "description": "User email (Unique)",
              "example": "johndoe@example.com"
            },
            "password": {
              "type": "string",
              "description": "User password (Must have at least 8 characters, a capital case letter, a lower case letter a number, and a special character)",
              "example": "123456789"
            },
            "passwordConfirmation": {
              "type": "string",
              "description": "User password confirmation (Should be the same value of 'password' field)",
              "example": "123456789"
            }
          }
        },
        "RefreshTokensRequest": {
          "required": [
            "refresh_token"
          ],
          "properties": {
            "refresh_token": {
              "type": "string",
              "description": "Refresh token returned when an user authenticates",
              "example": "6bd6eaf0a965d414ab9ffc0fb939ac4cinZNug7N3fi0vEhqOnht8tg40dUsJbFMqeEwKHkrHf+q0a2Eug1gy/QYiuHMeAgJ"
            }
          }
        },
        "UserRequest": {
          "required": [
            "name",
            "email",
            "password",
            "cpf",
            "phone",
            "roles"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "User name",
              "example": "John"
            },
            "email": {
              "type": "string",
              "description": "User email (Unique)",
              "example": "johndoe@example.com"
            },
            "password": {
              "type": "string",
              "description": "User password",
              "example": "123456789"
            },
            "birth": {
              "type": "string",
              "description": "User birth date",
              "example": "1995-05-12"
            },
            "cpf": {
              "type": "string",
              "description": "User CPF (Unique)",
              "example": "000.000.000-00"
            },
            "phone": {
              "type": "string",
              "description": "User phone number (Unique)",
              "example": "11900000000"
            },
            "gender": {
              "type": "string",
              "description": "User phone number",
              "enum": ["male", "female"],
              "example": "male"
            },
            "roles": {
              "type": "array",
              "description": "User roles",
              "items": {
                "type": "object",
                "properties": { 
                  "role": { 
                    "type": "string",
                    "description": "User roles",
                    "enum": ["master" ,"owner", "admin", "employee", "customer"]
                  },
                  "company": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "description": "Company ID"
                      },
                      "name": {
                        "type": "string",
                        "description": "Company name"
                      }
                    }
                  },
                  "branches": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "branch": {
                          "type": "string",
                          "description": "Branch ID"
                        },
                        "name": {
                          "type": "string",
                          "description": "Branch name"
                        }
                      }
                    }
                  }
                },
                "example": [
                  {
                    "role": "admin",
                    "company": {
                      "id": "5fb6fe52c77735007001f8d8",
                      "name": "John Doe Restaurants"
                    },
                    "branches": [
                      {
                        "branch": "5fb6fe52c77735007001f8d8",
                        "name": "John Doe Restaurant - Ohio"
                      },
                      {
                        "branch": "5fb6fe52c77735007001f8d8",
                        "name": "John Doe Restaurant - Iowa"
                      }
                    ]
                  }
                ]
              }
            },
            "preferences": {
              "type": "array",
              "description": "User preferences",
              "items": {
                "type": "object",
                "properties": { 
                  "preference": { 
                    "type": "string", 
                    "description": "User preference ID"
                  },
                  "value": { 
                    "type": "number", 
                    "description": "How much the user likes the preference",
                    "enum": [0, 1, 2, 3, 4, 5, 6]
                  } 
                },
                "example": [
                  {
                    "preference": "5ea9ef0686261700480fa472",
                    "value": 6
                  }
                ]
              }
            }
          }
        },
        "UserResponse": {
          "type": "object",
          "properties": {
            "error": {
              "type": "boolean",
              "description": "Boolean value telling whether an error has occurred",
              "example": false
            },
            "_id": {
              "type": "string",
              "example": "5fc7a5afbaa11c0070eeff39",
              "description": "User ID"
            },
            "name": {
              "type": "string",
              "description": "User name",
              "example": "John"
            },
            "email": {
              "type": "string",
              "description": "User email (Unique)",
              "example": "johndoe@example.com"
            },
            "password": {
              "type": "string",
              "description": "Hashed user password",
              "example": "$2b$10$nXevfD3upZbaIfytfK5uDOHAPVIQilWU3t938rZaqlQIoSHv7SUkK"
            },
            "birth": {
              "type": "string",
              "description": "User birth date",
              "example": "1995-05-12"
            },
            "cpf": {
              "type": "string",
              "description": "User CPF (Unique)",
              "example": "000.000.000-00"
            },
            "phone": {
              "type": "string",
              "description": "User phone number (Unique)",
              "example": "11900000000"
            },
            "gender": {
              "type": "string",
              "description": "User phone number",
              "enum": ["male", "female"],
              "example": "male"
            },
            "roles": {
              "type": "array",
              "description": "User roles",
              "items": {
                "type": "object",
                "properties": { 
                  "_id": {
                    "type": "string",
                    "description": "Role ID"
                  },
                  "role": { 
                    "type": "string", 
                    "description": "User roles",
                    "enum": ["admin" , "owner", "employee", "customer"]
                  },
                  "company": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Company ID"
                      },
                      "name": {
                        "type": "string",
                        "description": "Company name"
                      }
                    }
                  },
                  "branches": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string",
                          "description": "Object ID"
                        },
                        "branch": {
                          "type": "string",
                          "description": "Branch ID"
                        },
                        "name": {
                          "type": "string",
                          "description": "Branch name"
                        }
                      }
                    }
                  } 
                },
                "example": [
                  {
                    "_id": "5fc7a5afbaa11c0070eeff3a",
                    "role": "customer",
                    "company": {
                      "id": "5fb6fe52c77735007001f8d8",
                      "name": "John Doe Restaurants"
                    },
                    "branches": [
                      {
                        "_id": "5fb6fe52c77735007001f8d8",
                        "branch": "5fb6fe52c77735007001f8d8",
                        "name": "John Doe Restaurant - Ohio"
                      },
                      {
                        "_id": "5fb6fe52c77735007001f8d8",
                        "branch": "5fb6fe52c77735007001f8d8",
                        "name": "John Doe Restaurant - Iowa"
                      }
                    ]
                  }
                ]
              }
            },
            "preferences": {
              "type": "array",
              "description": "User preferences",
              "items": {
                "type": "object",
                "properties": { 
                  "preference": { 
                    "type": "string", 
                    "description": "User preference ID"
                  },
                  "value": { 
                    "type": "number", 
                    "description": "How much the user likes the preference",
                    "enum": [0, 1, 2, 3, 4, 5, 6]
                  } 
                },
                "example": [
                  {
                    "preference": "5ea9ef0686261700480fa472",
                    "value": 6
                  }
                ]
              }
            },
            "createdAt": {
              "type": "string",
              "description": "User creation date",
              "example": "2020-12-02T14:33:19.112Z"
            },
            "updatedAt": {
              "type": "string",
              "description": "User update date",
              "example": "2020-12-02T14:33:19.112Z"
            },
            "__v": {
              "type": "number",
              "description": "Document versioning key"
            }
          }
        },
        "UserIndex": {
          "properties": {
            "error": {
              "type": "boolean",
              "description": "Boolean value telling whether an error has occurred",
              "example": false
            },
            "statusCode": {
              "type": "integer",
              "description": "Response status code",
              "example": 200
            },
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UserResponse"
              }
            }
          }
        },
        "SessionRequest": {
          "required": [
            "email",
            "password"
          ],
          "properties": {
            "email": {
              "type": "string",
              "description": "User email",
              "example": "johndoe@example.com"
            },
            "password": {
              "type": "string",
              "description": "User password",
              "example": "123456789"
            }
          }
        },
        "SessionResponse": {
          "properties": {
            "error": {
              "type": "boolean",
              "description": "Boolean value telling whether an error has occurred",
              "example": false
            },
            "statusCode": {
              "type": "number",
              "description": "Response status code",
              "example": 200
            },
            "message": {
              "type": "string",
              "description": "Response message",
              "example": "Successfully logged in"
            },
            "user": {
              "type": "object",
              "description": "Logged in user data",
              "$ref": "#/components/schemas/UserResponse"
            },
            "token": {
              "type": "string",
              "description": "User bearer token",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
            }
          }
        },
        "UnauthorizedError": {
          "type": "object",
          "properties": {
            "error": {
              "type": "boolean",
              "description": "Boolean value telling whether an error has occurred",
              "example": true
            },
            "statusCode": {
              "type": "number",
              "description": "Response status code",
              "example": 401
            },
            "message": {
              "type": "string",
              "description": "Message for unauthorized errors",
              "example": "Unauthorized access"
            }
          }
        },
        "NotFoundError": {
          "type": "object",
          "properties": {
            "error": {
              "type": "boolean",
              "description": "Boolean value telling whether an error has occurred",
              "example": true
            },
            "statusCode": {
              "type": "number",
              "description": "Response status code",
              "example": 404
            },
            "message": {
              "type": "string",
              "description": "Message for not found errors",
              "example": "Not found"
            }
          }
        },
        "InputValidationError": {
          "type": "object",
          "properties": {
            "error": {
              "type": "boolean",
              "description": "Boolean value telling whether an error has occurred",
              "example": true
            },
            "statusCode": {
              "type": "number",
              "description": "Response status code",
              "example": 400
            },
            "message": {
              "type": "string",
              "description": "Message for input validation errors",
              "example": "Input validation error"
            }
          }
        },
        "CustomError": {
          "type": "object",
          "properties": {
            "error": {
              "type": "boolean",
              "description": "Boolean value telling whether an error has occurred",
              "example": true
            },
            "statusCode": {
              "type": "number",
              "description": "Response status code",
              "example": 500
            },
            "message": {
              "type": "string",
              "description": "Message for custom error",
              "example": "Custom error"
            }
          }
        },
        "Error": {
          "type": "object",
          "properties": {
            "code": {
              "type": "integer",
              "format": "int32"
            },
            "message": {
              "type": "string"
            },
            "fields": {
              "type": "string"
            }
          }
        },
        "Schema": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      }
    }
  }